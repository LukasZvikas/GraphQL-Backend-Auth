import { GraphQLSchema, DocumentNode } from 'apollo-server-core/src/node_modules/graphql';
import { SchemaDirectiveVisitor, IResolvers, IMocks, GraphQLParseOptions } from 'apollo-server-core/src/node_modules/graphql-tools';
import { ValueOrPromise } from 'apollo-server-core/src/node_modules/apollo-server-env';
import { ConnectionContext } from 'apollo-server-core/src/node_modules/subscriptions-transport-ws';
import WebSocket = require('apollo-server-core/src/node_modules/ws');
import { GraphQLExtension } from 'apollo-server-core/src/node_modules/graphql-extensions';
export { GraphQLExtension } from 'apollo-server-core/src/node_modules/graphql-extensions';
import { EngineReportingOptions } from 'apollo-server-core/src/node_modules/apollo-engine-reporting';
import { PlaygroundConfig } from 'apollo-server-core/src/playground';
export { PlaygroundConfig, PlaygroundRenderPageOptions } from 'apollo-server-core/src/playground';
import { GraphQLServerOptions as GraphQLOptions, PersistedQueryOptions } from 'apollo-server-core/src/graphqlOptions';
import { CacheControlExtensionOptions } from 'apollo-server-core/src/node_modules/apollo-cache-control';
import { ApolloServerPlugin } from 'apollo-server-core/src/node_modules/apollo-server-plugin-base';
import { GraphQLSchemaModule } from 'apollo-server-core/src/node_modules/@apollographql/apollo-tools';
export { GraphQLSchemaModule };
export { KeyValueCache } from 'apollo-server-core/src/node_modules/apollo-server-caching';
export declare type Context<T = object> = T;
export declare type ContextFunction<FunctionParams = any, ProducedContext = object> = (context: FunctionParams) => ValueOrPromise<Context<ProducedContext>>;
export declare type PluginDefinition = ApolloServerPlugin | (() => ApolloServerPlugin);
export interface SubscriptionServerOptions {
    path: string;
    keepAlive?: number;
    onConnect?: (connectionParams: Object, websocket: WebSocket, context: ConnectionContext) => any;
    onDisconnect?: (websocket: WebSocket, context: ConnectionContext) => any;
}
declare type BaseConfig = Pick<GraphQLOptions<Context>, 'formatError' | 'debug' | 'rootValue' | 'validationRules' | 'executor' | 'formatResponse' | 'fieldResolver' | 'tracing' | 'dataSources' | 'cache'>;
export interface Config extends BaseConfig {
    modules?: GraphQLSchemaModule[];
    typeDefs?: DocumentNode | Array<DocumentNode>;
    parseOptions?: GraphQLParseOptions;
    resolvers?: IResolvers;
    schema?: GraphQLSchema;
    schemaDirectives?: Record<string, typeof SchemaDirectiveVisitor>;
    context?: Context | ContextFunction;
    introspection?: boolean;
    mocks?: boolean | IMocks;
    mockEntireSchema?: boolean;
    engine?: boolean | EngineReportingOptions<Context>;
    extensions?: Array<() => GraphQLExtension>;
    cacheControl?: CacheControlExtensionOptions | boolean;
    plugins?: PluginDefinition[];
    persistedQueries?: PersistedQueryOptions | false;
    subscriptions?: Partial<SubscriptionServerOptions> | string | false;
    uploads?: boolean | FileUploadOptions;
    playground?: PlaygroundConfig;
}
export interface FileUploadOptions {
    maxFieldSize?: number;
    maxFileSize?: number;
    maxFiles?: number;
}
//# sourceMappingURL=types.d.ts.map